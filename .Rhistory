filter(joined, is.na(WWID)) %>% select(Primary.Author)
filter(joined, is.na(WWID)) %>% select(DomainAddress)
filter(submissions, is.na(Primary.Author))
filter(submissions, Primary.Author == "WALTER.D.VERME@INTEL.COM")
write.csv(joined, "SWPCcompleteInfo.csv")
?write.csv
write.csv(joined, "SWPCcompleteInfo.csv")
Titanic
Titanic[1]
Titanic[2]
mosaicplot(Titanic, main = "Survival on the Titanic")
library(help = "datasets").
library(help = "datasets")
USPersonalExpenditure
quakes
swiss
beavers
beavers
cars
WorldPhones
Loblolly
ToothGrowth
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
HairEyeColor
crimtab
morley
sleep
datasets-package
Titanic
Formaldehyde
Nile
Loblolly
swiss
class(swiss)
stripchart(swiss$Fertility)
stripchart(swiss$Infant.Mortality)
stripchart(swiss$Infant.Mortality,method="jitter")
?swiss
pairs(swiss, panel = panel.smooth, main = "swiss data",
col = 3 + (swiss$Catholic > 50))
?hist
hist(swiss$Fertility)
hist(swiss$Education)
mean(swiss$Education)
summary(swiss$Education)
hist(swiss$Education, breaks = 5)
hist(swiss$Education, breaks = 5)
hist(swiss$Education, breaks = 4)
hist(swiss$Education,breaks=2)
hist(swiss$Education,breaks=2)
hist(swiss$Education,breaks=10)
?hist
?swiss
hist(swiss$Education,breaks=10, main='Swiss education histogram',
xlab='% Infant.Mortality   live births who live less than 1 year')
hist(swiss$Education)
?swiss
stripchart(swiss$Fertility)
stripchart(swiss$Fertility,method="jitter")
stripchart(swiss$Fertility,method="jitter", main='Fertility in the swiss database',
xlab='Fertility in LG'
)
hist(swiss$Education)
summary(swiss$Education)
mean(swiss$Education)
hist(swiss$Education,breaks=10, main='Swiss education histogram',
xlab='% Infant.Mortality   live births who live less than 1 year')
boxplot(swiss$Education)
boxplot(swiss$Fertility, main='Fertility in the swiss database',
xlab='Fertility in LG')
plot(swiss$Fertility, swiss$Education)
cor(swiss$Fertility, swiss$Education)
swiss
plot(swiss$Fertility, swiss$Infant.Mortality)
cor(swiss$Fertility, swiss$Infant.Mortality)
plot(swiss$Fertility, swiss$Agriculture)
cor(swiss$Fertility, swiss$Agriculture)
plot(swiss$Fertility, swiss$Examination)
cor(swiss$Fertility, swiss$Examination)
plot(swiss$Fertility, swiss$Education)
cor(swiss$Fertility, swiss$Education)
plot(swiss$Fertility, swiss$Catholic)
cor(swiss$Fertility, swiss$Catholic)
plot(swiss$Fertility, swiss$Infant.Mortality)
cor(swiss$Fertility, swiss$Infant.Mortality)
qqnorm(swiss$Fertility)
??qqnorm
qqnorm(swiss$Fertility)
qqline(swiss$Fertility)
?qqnorm
plot(swiss$Fertility, swiss$Examination)
cor(swiss$Fertility, swiss$Examination)
temp <- swiss[swiss$Education > 0.75, swiss$Examination > 0.75]
temp <- swiss[swiss$Education > 0.75, swiss$Examination > 0.75,]
temp <- swiss[swiss$Education > 0.75 & swiss$Examination > 0.75,]
summary(temp$fertility)
summary(temp)
?discretize
discretize
library(arules)
install.packages(arules)
cut(swiss$Fertility, c(0,0.25,0.5,0.75,1))
cut(swiss$Education, c(0,0.25,0.5,0.75,1))
swiss$Education
cut(swiss$Education, c(0,25,50,75,100))
swiss$EducationCategorical <- cut(swiss$Education, c(0,25,50,75,100))
swiss$EducationCategorical
swiss[swiss$EducationCategorical  == "(75,100]"]
swiss$EducationCategorical[1]
swiss$EducationCategorical == "(75,100]"
swiss$EducationCategorical == 1
fileInput<- "C:\Users\rmongemo\Desktop\SampleEDWData\channel ops 201409.csv"
dataFrame <- read.csv(fileInput)
fileInput<- "C:/Users/rmongemo/Desktop/SampleEDWData/channel ops 201409.csv"
dataFrame <- read.csv(fileInput)
?read.csv
fileInput<- "C:/Users/rmongemo/Desktop/SampleEDWData/channel ops 201501 Germany from old query.csv"
frame <- read.csv(fileInput, sep = "~", quote = "", header=T)
View(frame)
fileInput<- "C:/Users/rmongemo/Desktop/SampleEDWData/channel ops 201501 Germany from old query.csv"
frame <- read.csv(fileInput, sep = "~", quote = "", header=T)
frame <- read.csv(fileInput, sep = "~", header=T)
quote = ""
fileInput<- "C:/Users/rmongemo/Desktop/SampleEDWData/channel ops 201501 Germany from old query.csv"
frame <- read.csv(fileInput, sep = ",", quote = "", header=T)
fileInput<- "C:/Users/rmongemo/Desktop/SampleEDWData/channel ops 201501 Germany from old query.csv"
frame <- read.csv(fileInput, sep = ",", quote = "", header=T)
fileInput<- "C:/Users/rmongemo/Desktop/SampleEDWData/channel ops 201501 Germany from old query.csv"
frame <- read.csv(fileInput, sep = ",", quote = "\"", header=T)
data()
data(airquality)
data(airquality)
airquality
plot(Ozone~Solor.R, data=airquality)
plot(Ozone~Solar.R, data=airquality)
2+2
data(mtcars)
n <- length(mtcars$mpg)
alpha <- 0.05
fit <- lm(mpg ~ am, data = mtcars)
coef(summary(fit))
sat<- read.csv("Sat.csv")
library(dplyr)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
set.seed(125)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
inTraining <- createDataPartition(y=spam$Case,list=FALSE)
inTraining <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
set.seed(125)
inTraining <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
training <- segmentationOriginal[inTraining
]
testing  <- segmentationOriginal[-inTraining]
modFit <- train(Case ~ .,method="rpart",data=training)
modFit <- train(Case ~ .,method="rpart",data=training)
modFit <- train(Case ~ .,method="rpart",data=training)
library(caret)
modFit <- train(Case ~ .,method="rpart",data=training)
?train
modFit <- train(Case ~ . ,method="rpart",data=training)
modFit <- train(Case ~ . ,method="rpart", data=training)
modFit <- train(form= Case ~ . ,method="rpart", data=training)
data(iris);
library(ggplot2)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species ~ .,method="rpart",data=training)
data(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Case ~ .,method="rpart",data=training)
inTrain <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Case ~ .,method="rpart",data=training)
inTrain <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ .,method="rpart",data=training)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ .,method="rpart",data=training)
prediction <- predict(modFit,newdata=testing)
print(modFit)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,      main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
View(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Class,list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class ~ .,method="rpart",data=training)
prediction <- predict(modFit,newdata=testing)
plot(modFit$finalModel, uniform=TRUE,      main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
4.726e+04
library(dplyr)
training <- filter(segmentationOriginal, Case == "Train")
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
modFit <- train(Class ~ .,method="rpart",data=training)
library(rpart)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
library(rpart.plot)
install.packages(rpart.plot)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
library(rattle)
library(rpart.plot)
library(caret)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
predict(modFit,newdata=newdata)
View(olive)
library(ElemStatLearn)
install.packages("ElemStatLearn")
?train
library(ElemStatLearn)
library(rattle)
library(rpart.plot)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(Area ~ .,method="glm",data=train, family = "binomial")
View(SAheart)
str(SAheart)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea+ ldl,method="glm",data=trainSA, family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
predictResult <- predict(modFit,newdata=testSA)
predictTrain <- predict(modFit,newdata=trainSA)
predictTest <- predict(modFit,newdata=testSA)
missClass(trainSA$chd, predictTrain)
missClass(testSa$chd, predictTest) $ 0.27
missClass(testSa$chd, predictTest)
missClass(testSA$chd, predictTest) # 0.27
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.test
View(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
modFit <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
?varImp
varImp(modFit)
install.packages("twitteR")
install.packages("streamR")
install.packages("ROAuth")
data <- read.csv("activity.csv")
getwd()
setwd("C:\rafamonge\RepData_PeerAssessment1)
setwd("C:/rafamonge/RepData_PeerAssessment1")
setwd("C:/rafamonge/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
View(data)
str(data)
as.Date(data$date)
class(as.Date(data$date))
data$date
class(as.Date(data$date), "%Y-%m-%d")
as.Date(data$date), "%Y-%m-%d")
class(as.Date(data$date, "%Y-%m-%d"))
as.Date(data$date, "%Y-%m-%d")
class(as.Date(data$date, "%Y-%m-%d"))
as.Date(data$date, "%Y-%m-%d")
data$date <- as.Date(data$date, "%Y-%m-%d")
library(dplyr)
View(data)
data %>% group_by(date) %>% summarize (date, mn = mean(steps)) %>% arrange(desc(date))
data %>% group_by(date) %>% summarize (date, mn = mean(steps))
data %>% group_by(date) %>%
)
;
data %>% group_by(date)
data %>% group_by(date) %>% summarize (mn = mean(steps))
?mean
data %>% group_by(date) %>% summarize (mn = mean(steps, na.rm = TRUE)) %>% arrange(desc(date))
data %>% filter(date = '2012-11-30')
data %>% filter(date == '2012-11-30')
library(ggplot2)
hist1 <- ggplot(data, aes(x=date, y =  mn)) + geom_histogram()
hist1
groupedByDay <- data %>% group_by(date) %>% summarize (mn = mean(steps, na.rm = TRUE)) %>% arrange(desc(date))
hist1 <- ggplot(groupedByDay, aes(x=date, y =  mn)) + geom_histogram()
hist1
hist1 <- ggplot(groupedByDay, aes(mn)) + geom_histogram()
hist1
groupedByDay <- data %>% group_by(date) %>% summarize (mn = mean(steps, na.rm = TRUE), md = median(steps, na.rm=TRUE)) %>% arrange(desc(date))
sum(c(1,3))
groupedByDay <- data %>% group_by(date) %>% summarize (total = sum(steps))
groupedByDay
?sum
groupedByDay <- data %>% group_by(date) %>% summarize (total = sum(steps, na.rm=TRUE))
groupedByDay <- data %>% group_by(date) %>% summarize (total = sum(steps, na.rm=TRUE))
data %>% filter(!is.na(steps) )
data <- data %>% filter(!is.na(steps) )
groupedByDay <- data %>% group_by(date) %>% summarize (total = sum(steps))
groupedByDay
mean <- mean(groupedByDay$total)
mn <- mean(groupedByDay$total)
library(dplyr)
library(ggplot2)
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, "%Y-%m-%d")
data <- data %>% filter(!is.na(steps) )
## What is mean total number of steps taken per day?
groupedByDay <- data %>% group_by(date) %>% summarize (total = sum(steps))
mn <- mean(groupedByDay$total)
md <- median(groupedByDay$total)
ggplot(groupedByDay, aes(total)) + geom_histogram()
groupedByDay
length(groupedByDay)
nrow(groupedByDay)
library(dplyr)
library(ggplot2)
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, "%Y-%m-%d")
data <- data %>% filter(!is.na(steps) )
## What is mean total number of steps taken per day?
groupedByDay <- data %>% group_by(date) %>% summarize (total = sum(steps))
ggplot(groupedByDay, aes(total)) + geom_histogram()
mn <- mean(groupedByDay$total)
md <- median(groupedByDay$total)
ggplot(data, aes(Date, interval)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Views")
ggplot(data, aes(Date, interval)) + geom_line()
ggplot(data, aes(date, interval)) + geom_line()
ggplot(data, aes(interval, steps)) + geom_line()
source('~/.active-rstudio-document', echo=TRUE)
data %>% group_by(interval) %>% summarize(avg = mean(steps))
byInterlval <-data %>% group_by(interval) %>% summarize(avg = mean(steps))
ggplot(byInterlval, aes(interval, avg)) + geom_line()
ggplot(byInterlval, aes(interval, avg)) + geom_line() +
xlab("interval") + ylab("average steps")
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, "%Y-%m-%d")
## What is mean total number of steps taken per day?
groupedByDay <- data %>% group_by(date) %>% summarize (total = sum(steps, na.rm =TRUE))
ggplot(groupedByDay, aes(total)) + geom_histogram()
mn <- mean(groupedByDay$total, na.rm =TRUE)
md <- median(groupedByDay$total, na.rm =TRUE)
?sum
byInterlval <-data %>% group_by(interval) %>% summarize(avg = mean(steps, na.rm=TRUE))
ggplot(byInterlval, aes(interval, avg)) + geom_line() +
xlab("interval") + ylab("average steps")
library(caret)
preprocess(data, method="knnImpute")
preProcess(data, method="knnImpute")
dataKnnImpute<- preProcess(data, method="knnImpute")
sum(is.na(dataKnnImpute))
sum(is.na(data))
byInterlval <-data %>% group_by(interval) %>% summarize(avg = mean(steps, na.rm=TRUE)) %>% arrange(desc(avg))
byInterlval
Max <- byInterlval[1]
Max
Max <- byInterlval[1,]
Max
groupedByDayImpute <- dataKnnImpute %>% group_by(date) %>% summarize (total = sum(steps, na.rm =TRUE))
ggplot(dataKnnImpute, aes(total)) + geom_histogram()
dataKnnImpute
predict(dataKnnImpute)
predict(newdata=dataKnnImpute)
predict(pp, dataKnnImpute)
pp<- preProcess(data, method="knnImpute")
pp<- preProcess(data, method="knnImpute")
predict(pp, data)
install.packages("RANN")
library(RANN)
pp<- preProcess(data, method="knnImpute")
predict(pp, data)
pp<- preProcess(data, method="knnImpute")
predict(pp, data)
data
predict(pp, data$steps)
pp<- preProcess(data[,1], method="knnImpute")
predict(pp, data[,1])
pp<- preProcess(data, method="knnImpute")
predict(pp, data)
data
pp<- preProcess(data[,-2], method="knnImpute")
predict(pp, data[,-2])
pp<- preProcess(data[,-2], method="knnImpute")
knnImpute <-predict(pp, data[,-2])
str(knnImpute)
pp<- preProcess(data, method="knnImpute")
pp
pp<- preProcess(data, method="knnImpute")
knnImpute <-predict(pp, data[,-2])
names(pp)
pp<- preProcess(data, method="medianImpute")
pp<- preProcess(data, method="medianImpute")
knnImpute <-predict(pp, data)$steps
knnImpute
pp<- preProcess(data, method="medianImpute")
knnImpute <-predict(pp, data)$steps
dataKnnImpute$steps <- knnImpute
sum(is.na(dataKnnImpute))
groupedByDayImpute <- dataMedianImpute %>% group_by(date) %>% summarize (total = sum(steps, na.rm =TRUE))
ggplot(dataMedianImpute, aes(total)) + geom_histogram()
pp<- preProcess(data, method="medianImpute")
medianImpute <-predict(pp, data)$steps
dataMedianImpute$steps <- medianImpute
groupedByDayImpute <- dataMedianImpute %>% group_by(date) %>% summarize (total = sum(steps, na.rm =TRUE))
ggplot(dataMedianImpute, aes(total)) + geom_histogram()
dataMedianImpute$steps <- medianImpute
dataMedianImpute <- data
dataMedianImpute$steps <- medianImpute
sum(is.na(dataKnnImpute))
sum(is.na(dataMedianImpute))
names(dataMedianImpute)
groupedByDayImpute <- dataMedianImpute %>% group_by(date) %>% summarize (total = sum(steps))
ggplot(dataMedianImpute, aes(total)) + geom_histogram()
groupedByDayImpute <- dataMedianImpute %>% group_by(date) %>% summarize (total = sum(steps, na.rm =TRUE))
ggplot(dataMedianImpute, aes(total)) + geom_histogram()
groupedByDayImpute <- dataMedianImpute %>% group_by(date) %>% summarize (total = sum(steps, na.rm =TRUE))
ggplot(groupedByDayImpute, aes(total)) + geom_histogram()
install.packages("gridExtra")
library(gridExtra)
hist2<-ggplot(groupedByDayImpute, aes(total)) + geom_histogram()
hist1<-ggplot(groupedByDay, aes(total)) + geom_histogram()
hist1
hist2<-ggplot(groupedByDayImpute, aes(total)) + geom_histogram()
grid.arrange(hist1, hist2, ncol=2)
sum(is.na(data))
groupedByDayImpute
groupedByDay
weekdays(data$date)
data$weekday <- weekdays(data$date)
data$weekend <- data$weekday %in% c("Saturday", "Sunday")
data$weekend
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, "%Y-%m-%d")
data$weekday <- weekdays(data$date)
data$weekend <- data$weekday %in% c("Saturday", "Sunday")
## What is mean total number of steps taken per day?
groupedByDay <- data %>% group_by(date) %>% summarize (total = sum(steps, na.rm =TRUE))
hist1<-ggplot(groupedByDay, aes(total)) + geom_histogram()
hist1
mn <- mean(groupedByDay$total, na.rm =TRUE)
md <- median(groupedByDay$total, na.rm =TRUE)
## What is the average daily activity pattern?
byInterlval <-data %>% group_by(interval) %>% summarize(avg = mean(steps, na.rm=TRUE)) %>% arrange(desc(avg))
ggplot(byInterlval, aes(interval, avg)) + geom_line() +
xlab("interval") + ylab("average steps")
Max <- byInterlval[1,]
## Imputing missing values
pp<- preProcess(data, method="medianImpute")
medianImpute <-predict(pp, data)$steps
dataMedianImpute <- data
dataMedianImpute$steps <- medianImpute
groupedByDayImpute <- dataMedianImpute %>% group_by(date) %>% summarize (total = sum(steps, na.rm =TRUE))
hist2<-ggplot(groupedByDayImpute, aes(total)) + geom_histogram()
grid.arrange(hist1, hist2, ncol=2)
byInterlval
byInterlvalWeekend <-data %>% group_by(interval,weekend) %>% summarize(avg = mean(steps, na.rm=TRUE)) %>% arrange(desc(avg))
byInterlvalWeekend
line1<- ggplot(byInterlvalWeekend %>% filter(weekend), aes(interval, avg)) + geom_line() +
xlab("interval") + ylab("average steps")
line1
line2<- ggplot(byInterlvalWeekend %>% filter(!weekend), aes(interval, avg)) + geom_line() +
xlab("interval") + ylab("average steps")
line2
grid.arrange(line1, line2, nrow=2)
line1<- ggplot(byInterlvalWeekend %>% filter(weekend), aes(interval, avg)) + geom_line() + ggtitle("Weekend") +
xlab("interval") + ylab("average steps")
line2<- ggplot(byInterlvalWeekend %>% filter(!weekend), aes(interval, avg)) + geom_line() +ggtitle("Weekday")
xlab("interval") + ylab("average steps")
grid.arrange(line1, line2, nrow=2)
